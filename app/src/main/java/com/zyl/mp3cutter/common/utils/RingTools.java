package com.zyl.mp3cutter.common.utils;import android.app.Activity;import android.content.ContentValues;import android.database.Cursor;import android.media.RingtoneManager;import android.net.Uri;import android.os.Build;import android.provider.MediaStore;import android.provider.Settings;import android.widget.Toast;import com.orhanobut.logger.Logger;import com.zyl.mp3cutter.R;import java.io.File;public class RingTools {    /**     * 设置铃声     *     * @param type RingtoneManager.TYPE_RINGTONE 来电铃声     *             RingtoneManager.TYPE_NOTIFICATION 通知铃声     *             RingtoneManager.TYPE_ALARM 闹钟铃声     * @param path 下载下来的mp3全路径     */    public static void setRing(Activity context, int type, String path) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {            // 判断是否有WRITE_SETTINGS权限            if (!Settings.System.canWrite(context)) {                Toast.makeText(context, context.getResources().getString(R.string.homefragment_systemsetting_denied),                        Toast.LENGTH_SHORT).show();            } else {                setRingHasPermission(context, type, path);            }        } else {            setRingHasPermission(context, type, path);        }    }    private static void setRingHasPermission(Activity context, int type, String path) {        Uri oldRingtoneUri = RingtoneManager.getActualDefaultRingtoneUri(context, RingtoneManager.TYPE_RINGTONE); //系统当前  通知铃声        Uri oldNotification = RingtoneManager.getActualDefaultRingtoneUri(context, RingtoneManager.TYPE_NOTIFICATION); //系统当前  通知铃声        Uri oldAlarm = RingtoneManager.getActualDefaultRingtoneUri(context, RingtoneManager.TYPE_ALARM); //系统当前  闹钟铃声        File sdfile = new File(path);        ContentValues values = new ContentValues();        values.put(MediaStore.MediaColumns.DATA, sdfile.getAbsolutePath());        values.put(MediaStore.MediaColumns.TITLE, sdfile.getName());        values.put(MediaStore.MediaColumns.MIME_TYPE, "audio/mp3");        values.put(MediaStore.Audio.Media.IS_RINGTONE, true);        values.put(MediaStore.Audio.Media.IS_NOTIFICATION, true);        values.put(MediaStore.Audio.Media.IS_ALARM, true);        values.put(MediaStore.Audio.Media.IS_MUSIC, true);        Uri uri = MediaStore.Audio.Media.getContentUriForPath(sdfile.getAbsolutePath());        Uri newUri = null;        String deleteId = "";        try {            Cursor cursor = context.getContentResolver().query(uri, null, MediaStore.MediaColumns.DATA + "=?", new String[]{path}, null);            if (cursor.moveToFirst()) {                deleteId = cursor.getString(cursor.getColumnIndex("_id"));            }            Logger.d(" + deleteId" + deleteId);            context.getContentResolver().delete(uri,                    MediaStore.MediaColumns.DATA + "=\"" + sdfile.getAbsolutePath() + "\"", null);            newUri = context.getContentResolver().insert(uri, values);        } catch (Exception e) {            e.printStackTrace();        }        if (newUri != null) {            String ringStoneId = "";            String notificationId = "";            String alarmId = "";            if (null != oldRingtoneUri) {                ringStoneId = oldRingtoneUri.getLastPathSegment();            }            if (null != oldNotification) {                notificationId = oldNotification.getLastPathSegment();            }            if (null != oldAlarm) {                alarmId = oldAlarm.getLastPathSegment();            }            Uri setRingStoneUri;            Uri setNotificationUri;            Uri setAlarmUri;            if (type == RingtoneManager.TYPE_RINGTONE || ringStoneId.equals(deleteId)) {                setRingStoneUri = newUri;            } else {                setRingStoneUri = oldRingtoneUri;            }            if (type == RingtoneManager.TYPE_NOTIFICATION || notificationId.equals(deleteId)) {                setNotificationUri = newUri;            } else {                setNotificationUri = oldNotification;            }            if (type == RingtoneManager.TYPE_ALARM || alarmId.equals(deleteId)) {                setAlarmUri = newUri;            } else {                setAlarmUri = oldAlarm;            }            RingtoneManager.setActualDefaultRingtoneUri(context, RingtoneManager.TYPE_RINGTONE, setRingStoneUri);            RingtoneManager.setActualDefaultRingtoneUri(context, RingtoneManager.TYPE_NOTIFICATION, setNotificationUri);            RingtoneManager.setActualDefaultRingtoneUri(context, RingtoneManager.TYPE_ALARM, setAlarmUri);            switch (type) {                case RingtoneManager.TYPE_RINGTONE:                    Toast.makeText(context.getApplicationContext(), "设置来电铃声成功！", Toast.LENGTH_SHORT).show();                    break;                case RingtoneManager.TYPE_NOTIFICATION:                    Toast.makeText(context.getApplicationContext(), "设置通知铃声成功！", Toast.LENGTH_SHORT).show();                    break;                case RingtoneManager.TYPE_ALARM:                    Toast.makeText(context.getApplicationContext(), "设置闹钟铃声成功！", Toast.LENGTH_SHORT).show();                    break;            }        }    }}